// package ioc

// import (
// 	"log"
// 	"reflect"
// )

// var ioc = make(map[reflect.Type]any)

// func Register(data ...any) {
// 	for i := 0; i < len(data); i++ {
// 		register(data[i])
// 	}
// }

// func register(instance any) {
// 	//instance必须为指针
// 	if reflect.ValueOf(instance).Kind() != reflect.Pointer {
// 		log.Fatalf("Cloud not register an object without pointer")
// 	}

// 	instanceType := reflect.TypeOf(instance)

// 	if ioc[instanceType] != nil {
// 		log.Fatalf("Could not register an exists object")
// 	}
// 	ioc[instanceType] = instance
// }

// func Get[T any]() *T {
// 	//(*T)(nil) 声明一个类型T为空 约等于 c#的 typeof(T)
// 	instanceType := reflect.TypeOf((*T)(nil))
// 	//try error
// 	val, ok := ioc[instanceType].(*T)
// 	if !ok {
// 		log.Fatalf("Could not find in ioc: %s", instanceType)
// 	}
// 	return val
// }
